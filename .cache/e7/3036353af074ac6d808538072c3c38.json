{"id":"../node_modules/uuid/dist/bytesToUuid.js","dependencies":[{"name":"C:\\Ellerson\\Curso e Livro\\Cursos\\Udemy\\React profissional\\myapp\\package.json","includedInParent":true,"mtime":1592775898639},{"name":"C:\\Ellerson\\Curso e Livro\\Cursos\\Udemy\\React profissional\\myapp\\.babelrc","includedInParent":true,"mtime":1592276028468},{"name":"C:\\Ellerson\\Curso e Livro\\Cursos\\Udemy\\React profissional\\myapp\\node_modules\\uuid\\package.json","includedInParent":true,"mtime":1592281248303}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;"},"sourceMaps":{"js":{"mappings":[{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":24,"column":0},"generated":{"line":24,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":25,"column":0},"generated":{"line":25,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":26,"column":0},"generated":{"line":26,"column":0}},{"source":"../node_modules/uuid/dist/bytesToUuid.js","original":{"line":27,"column":0},"generated":{"line":27,"column":0}}],"sources":{"../node_modules/uuid/dist/bytesToUuid.js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\n/**\n * Convert array of 16 byte values to UUID string format of the form:\n * XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX\n */\nconst byteToHex = [];\n\nfor (let i = 0; i < 256; ++i) {\n  byteToHex.push((i + 0x100).toString(16).substr(1));\n}\n\nfunction bytesToUuid(buf, offset) {\n  const i = offset || 0;\n  const bth = byteToHex; // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n\n  return (bth[buf[i + 0]] + bth[buf[i + 1]] + bth[buf[i + 2]] + bth[buf[i + 3]] + '-' + bth[buf[i + 4]] + bth[buf[i + 5]] + '-' + bth[buf[i + 6]] + bth[buf[i + 7]] + '-' + bth[buf[i + 8]] + bth[buf[i + 9]] + '-' + bth[buf[i + 10]] + bth[buf[i + 11]] + bth[buf[i + 12]] + bth[buf[i + 13]] + bth[buf[i + 14]] + bth[buf[i + 15]]).toLowerCase();\n}\n\nvar _default = bytesToUuid;\nexports.default = _default;"},"lineCount":27}},"error":null,"hash":"78b0109d79b1147c75cffd95e029bcbb","cacheData":{"env":{}}}